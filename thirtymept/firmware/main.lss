
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000230  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000230  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800072  00800072  000002d6  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  000009f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000034c  00000000  00000000  00000a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000140  00000000  00000000  00000d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000e4  00000000  00000000  00000ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000010c  00000000  00000000  00000f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000239  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001f9  00000000  00000000  000012d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  000014ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	9e c0       	rjmp	.+316    	; 0x14a <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e0 e3       	ldi	r30, 0x30	; 48
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 37       	cpi	r26, 0x72	; 114
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a2 e7       	ldi	r26, 0x72	; 114
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a9 37       	cpi	r26, 0x79	; 121
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	b7 d0       	rcall	.+366    	; 0x1c4 <main>
  56:	ea c0       	rjmp	.+468    	; 0x22c <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <spi_init>:
	0xdd,0xc7,0x5d,0xc4
};

void spi_init(void)
{
	DDRA |= (1<<PA0);	// AD9850 FQUD
  5a:	d0 9a       	sbi	0x1a, 0	; 26
	DDRB |= (1<<PB7) | (1<<PB6);
  5c:	87 b3       	in	r24, 0x17	; 23
  5e:	80 6c       	ori	r24, 0xC0	; 192
  60:	87 bb       	out	0x17, r24	; 23
	USICR |= (1<<USIWM0) | (1<<USICS1) | (1<<USICLK);
  62:	8d b1       	in	r24, 0x0d	; 13
  64:	8a 61       	ori	r24, 0x1A	; 26
  66:	8d b9       	out	0x0d, r24	; 13
  68:	08 95       	ret

0000006a <spi_transfer>:
}

uint8_t spi_transfer(uint8_t data)
{
	USIDR = data;
  6a:	8f b9       	out	0x0f, r24	; 15
	USISR |= (1<<USIOIF);
  6c:	76 9a       	sbi	0x0e, 6	; 14
	USICR |= (1<<USIWM0) | (1<<USICS1) | (1<<USICLK) | (1<<USITC);
  6e:	8d b1       	in	r24, 0x0d	; 13
  70:	8b 61       	ori	r24, 0x1B	; 27
  72:	8d b9       	out	0x0d, r24	; 13
	while(!(USISR & (1<<USIOIF))) USICR |= (1<<USITC);
  74:	76 99       	sbic	0x0e, 6	; 14
  76:	02 c0       	rjmp	.+4      	; 0x7c <spi_transfer+0x12>
  78:	68 9a       	sbi	0x0d, 0	; 13
  7a:	fc cf       	rjmp	.-8      	; 0x74 <spi_transfer+0xa>
	return USIDR;
  7c:	8f b1       	in	r24, 0x0f	; 15
}
  7e:	08 95       	ret

00000080 <ad9850_setfreq>:

void ad9850_setfreq(const uint8_t* conf)
{
  80:	1f 93       	push	r17
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	ec 01       	movw	r28, r24
  88:	15 e0       	ldi	r17, 0x05	; 5
	for(uint8_t i = 0; i < 5; i++) spi_transfer(conf[i]);
  8a:	89 91       	ld	r24, Y+
  8c:	ee df       	rcall	.-36     	; 0x6a <spi_transfer>
  8e:	11 50       	subi	r17, 0x01	; 1
  90:	e1 f7       	brne	.-8      	; 0x8a <ad9850_setfreq+0xa>
	PORTA |= (1<<PA0);
  92:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA &= ~(1<<PA0);
  94:	d8 98       	cbi	0x1b, 0	; 27
}
  96:	df 91       	pop	r29
  98:	cf 91       	pop	r28
  9a:	1f 91       	pop	r17
  9c:	08 95       	ret

0000009e <key_init>:

void key_init(void)
{
	DDRD |= (1<<PD0);
  9e:	88 9a       	sbi	0x11, 0	; 17
	PORTD &= ~(1<<PD0);
  a0:	90 98       	cbi	0x12, 0	; 18
  a2:	08 95       	ret

000000a4 <keyfsk>:
}

void keyfsk(void)
{
	if(bytecnt < MORSEBYTES)
  a4:	80 91 75 00 	lds	r24, 0x0075
  a8:	88 30       	cpi	r24, 0x08	; 8
  aa:	c0 f5       	brcc	.+112    	; 0x11c <__stack+0x3d>
	{
		if(bitcnt < 7)
  ac:	80 91 78 00 	lds	r24, 0x0078
		{
			if((call[bytecnt]>>(7-bitcnt)) & 1) nextfreq = TX_FREQ_HI;
  b0:	e0 91 75 00 	lds	r30, 0x0075

void keyfsk(void)
{
	if(bytecnt < MORSEBYTES)
	{
		if(bitcnt < 7)
  b4:	87 30       	cpi	r24, 0x07	; 7
  b6:	f0 f4       	brcc	.+60     	; 0xf4 <__stack+0x15>
		{
			if((call[bytecnt]>>(7-bitcnt)) & 1) nextfreq = TX_FREQ_HI;
  b8:	40 91 78 00 	lds	r20, 0x0078
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	e0 5a       	subi	r30, 0xA0	; 160
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
  c2:	80 81       	ld	r24, Z
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	27 e0       	ldi	r18, 0x07	; 7
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	24 1b       	sub	r18, r20
  cc:	31 09       	sbc	r19, r1
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <keyfsk+0x30>
  d0:	95 95       	asr	r25
  d2:	87 95       	ror	r24
  d4:	2a 95       	dec	r18
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <keyfsk+0x2c>
  d8:	80 ff       	sbrs	r24, 0
  da:	04 c0       	rjmp	.+8      	; 0xe4 <__stack+0x5>
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 74 00 	sts	0x0074, r24
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__stack+0x9>
			else nextfreq = TX_FREQ_LO;
  e4:	10 92 74 00 	sts	0x0074, r1
			bitcnt++;
  e8:	80 91 78 00 	lds	r24, 0x0078
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 78 00 	sts	0x0078, r24
  f2:	08 95       	ret
		} else {
			if(call[bytecnt] & 1) nextfreq = TX_FREQ_HI;
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	e0 5a       	subi	r30, 0xA0	; 160
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	80 81       	ld	r24, Z
  fc:	80 ff       	sbrs	r24, 0
  fe:	04 c0       	rjmp	.+8      	; 0x108 <__stack+0x29>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 74 00 	sts	0x0074, r24
 106:	02 c0       	rjmp	.+4      	; 0x10c <__stack+0x2d>
			else nextfreq = TX_FREQ_LO;
 108:	10 92 74 00 	sts	0x0074, r1
			bitcnt = 0;
 10c:	10 92 78 00 	sts	0x0078, r1
			bytecnt++;
 110:	80 91 75 00 	lds	r24, 0x0075
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	80 93 75 00 	sts	0x0075, r24
 11a:	08 95       	ret
		}
	} else {
		txcomplete = 1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 77 00 	sts	0x0077, r24
 122:	08 95       	ret

00000124 <timer0_start>:
	}
}

void timer0_start(void)
{
	t0ovfcnt = 0;
 124:	10 92 73 00 	sts	0x0073, r1
 128:	10 92 72 00 	sts	0x0072, r1
	TCNT0 = 0;
 12c:	12 be       	out	0x32, r1	; 50
	// enable timer0 interrupt
	TIMSK |= (1<<TOIE0);
 12e:	89 b7       	in	r24, 0x39	; 57
 130:	82 60       	ori	r24, 0x02	; 2
 132:	89 bf       	out	0x39, r24	; 57
	// start timer0, prescaler 8
	TCCR0B |= (1<<CS01);
 134:	83 b7       	in	r24, 0x33	; 51
 136:	82 60       	ori	r24, 0x02	; 2
 138:	83 bf       	out	0x33, r24	; 51
 13a:	08 95       	ret

0000013c <timer0_stop>:
}

void timer0_stop(void)
{
	TCCR0B &= ~(1<<CS01);
 13c:	83 b7       	in	r24, 0x33	; 51
 13e:	8d 7f       	andi	r24, 0xFD	; 253
 140:	83 bf       	out	0x33, r24	; 51
	TIMSK &= ~(1<<TOIE0);
 142:	89 b7       	in	r24, 0x39	; 57
 144:	8d 7f       	andi	r24, 0xFD	; 253
 146:	89 bf       	out	0x39, r24	; 57
 148:	08 95       	ret

0000014a <__vector_6>:
	}
	return 0;
}

ISR(TIMER0_OVF_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	if(t0ovfcnt < CWT0OVFS) t0ovfcnt++;
 16c:	80 91 72 00 	lds	r24, 0x0072
 170:	90 91 73 00 	lds	r25, 0x0073
 174:	81 37       	cpi	r24, 0x71	; 113
 176:	9b 40       	sbci	r25, 0x0B	; 11
 178:	50 f4       	brcc	.+20     	; 0x18e <__vector_6+0x44>
 17a:	80 91 72 00 	lds	r24, 0x0072
 17e:	90 91 73 00 	lds	r25, 0x0073
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	90 93 73 00 	sts	0x0073, r25
 188:	80 93 72 00 	sts	0x0072, r24
 18c:	0a c0       	rjmp	.+20     	; 0x1a2 <__vector_6+0x58>
	else {
		t0ovfcnt = 0;
 18e:	10 92 73 00 	sts	0x0073, r1
 192:	10 92 72 00 	sts	0x0072, r1
 		unitcnt++;
 196:	80 91 76 00 	lds	r24, 0x0076
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	80 93 76 00 	sts	0x0076, r24
		keyfsk();
 1a0:	81 df       	rcall	.-254    	; 0xa4 <keyfsk>
	}
}
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	7f 91       	pop	r23
 1b0:	6f 91       	pop	r22
 1b2:	5f 91       	pop	r21
 1b4:	4f 91       	pop	r20
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <main>:
int main(void)
{
	tMeptState currstate,nextstate;
	tTxFreq currfreq;

	spi_init();
 1c4:	4a df       	rcall	.-364    	; 0x5a <spi_init>
	key_init();
 1c6:	6b df       	rcall	.-298    	; 0x9e <key_init>

	currstate = MEPT_TX_START;
	nextstate = MEPT_TX_START;

	currfreq = TX_FREQ_HI;
	nextfreq = TX_FREQ_LO;
 1c8:	10 92 74 00 	sts	0x0074, r1

	ad9850_setfreq(ad9850flo);
 1cc:	8d e6       	ldi	r24, 0x6D	; 109
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	57 df       	rcall	.-338    	; 0x80 <ad9850_setfreq>

	sei();
 1d2:	78 94       	sei
	{
		switch(currstate)
		{
			case MEPT_TX_START:
				// reset all status variables
				txcomplete = 0;
 1d4:	10 92 77 00 	sts	0x0077, r1
				unitcnt = 0;
 1d8:	10 92 76 00 	sts	0x0076, r1
				bitcnt = 0;
 1dc:	10 92 78 00 	sts	0x0078, r1
				bytecnt = 0;
 1e0:	10 92 75 00 	sts	0x0075, r1

				currfreq = TX_FREQ_HI;
				nextfreq = TX_FREQ_LO;
 1e4:	10 92 74 00 	sts	0x0074, r1

				timer0_stop();
 1e8:	a9 df       	rcall	.-174    	; 0x13c <timer0_stop>
				// key up transmitter
				PORTD |= (1<<PD0);
 1ea:	90 9a       	sbi	0x12, 0	; 18
				timer0_start();
 1ec:	9b df       	rcall	.-202    	; 0x124 <timer0_start>
				txcomplete = 0;
				unitcnt = 0;
				bitcnt = 0;
				bytecnt = 0;

				currfreq = TX_FREQ_HI;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
				timer0_start();
				nextstate = MEPT_TX_PROGRESS;
				break;

			case MEPT_TX_PROGRESS:
				if(currfreq != nextfreq)
 1f0:	90 91 74 00 	lds	r25, 0x0074
 1f4:	89 17       	cp	r24, r25
 1f6:	81 f0       	breq	.+32     	; 0x218 <main+0x54>
				{
					if(nextfreq == TX_FREQ_LO) ad9850_setfreq(ad9850flo);
 1f8:	80 91 74 00 	lds	r24, 0x0074
 1fc:	81 11       	cpse	r24, r1
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <main+0x42>
 200:	8d e6       	ldi	r24, 0x6D	; 109
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	06 c0       	rjmp	.+12     	; 0x212 <main+0x4e>
					else if(nextfreq == TX_FREQ_HI) ad9850_setfreq(ad9850fhi);
 206:	80 91 74 00 	lds	r24, 0x0074
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	19 f4       	brne	.+6      	; 0x214 <main+0x50>
 20e:	88 e6       	ldi	r24, 0x68	; 104
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	36 df       	rcall	.-404    	; 0x80 <ad9850_setfreq>
					currfreq = nextfreq;
 214:	80 91 74 00 	lds	r24, 0x0074
				}
				if(txcomplete){
 218:	90 91 77 00 	lds	r25, 0x0077
 21c:	99 23       	and	r25, r25
 21e:	41 f3       	breq	.-48     	; 0x1f0 <main+0x2c>
					// key down transmitter
					PORTD &= ~(1<<PD0);
 220:	90 98       	cbi	0x12, 0	; 18
					nextstate = MEPT_TX_DELAY;
				} else nextstate = MEPT_TX_PROGRESS;
				break;

			case MEPT_TX_DELAY:
				if(unitcnt < 100) nextstate = MEPT_TX_DELAY;
 222:	80 91 76 00 	lds	r24, 0x0076
 226:	84 36       	cpi	r24, 0x64	; 100
 228:	a8 f6       	brcc	.-86     	; 0x1d4 <main+0x10>
 22a:	fb cf       	rjmp	.-10     	; 0x222 <main+0x5e>

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
